{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { useUserStore } from '@/store/user';\nimport router from '@/router';\nconst service = axios.create({\n  baseURL: 'http://192.168.70.192:8080',\n  // 后端服务地址\n  timeout: 5000,\n  withCredentials: true // 允许跨域请求携带凭证\n});\n\n// 是否正在刷新token\nlet isRefreshing = false;\n// 重试队列\nlet retryRequests = [];\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  const userStore = useUserStore();\n  const token = userStore.token;\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n  if (res.code !== 200) {\n    ElMessage.error(res.message || '请求失败');\n    return Promise.reject(new Error(res.message || '请求失败'));\n  }\n  return res;\n}, async error => {\n  const {\n    response\n  } = error;\n  const userStore = useUserStore();\n  if (response && response.status === 401) {\n    if (!isRefreshing) {\n      isRefreshing = true;\n      try {\n        // 尝试刷新token\n        const refreshToken = sessionStorage.getItem('refreshToken');\n        if (refreshToken) {\n          const res = await service.post('/users/refresh-token', {\n            refreshToken\n          });\n          if (res.code === 200) {\n            userStore.setUserInfo({\n              token: res.data.token,\n              user: userStore.userInfo\n            });\n\n            // 重试队列中的请求\n            retryRequests.forEach(cb => cb(res.data.token));\n            retryRequests = [];\n\n            // 重试当前请求\n            error.config.headers['Authorization'] = `Bearer ${res.data.token}`;\n            return service(error.config);\n          }\n        }\n      } catch (refreshError) {\n        console.error('Token refresh failed:', refreshError);\n      } finally {\n        isRefreshing = false;\n      }\n    } else {\n      // 将请求加入重试队列\n      return new Promise(resolve => {\n        retryRequests.push(token => {\n          error.config.headers['Authorization'] = `Bearer ${token}`;\n          resolve(service(error.config));\n        });\n      });\n    }\n\n    // token刷新失败，清除用户信息并跳转到登录页\n    userStore.clearUserInfo();\n    router.push('/login');\n    ElMessage.error('登录已过期，请重新登录');\n  } else if (response && response.status === 403) {\n    ElMessage.error('没有权限，请重新登录');\n    userStore.clearUserInfo();\n    router.push('/login');\n  } else {\n    ElMessage.error(error.message || '请求失败');\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","useUserStore","router","service","create","baseURL","timeout","withCredentials","isRefreshing","retryRequests","interceptors","request","use","config","userStore","token","headers","error","console","Promise","reject","response","res","data","code","message","Error","status","refreshToken","sessionStorage","getItem","post","setUserInfo","user","userInfo","forEach","cb","refreshError","resolve","push","clearUserInfo"],"sources":["C:/Users/52291/Desktop/test/blog/blog/blog-frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n    ElMessage\r\n} from 'element-plus';\r\nimport {\r\n    useUserStore\r\n} from '@/store/user';\r\nimport router from '@/router';\r\n\r\nconst service = axios.create({\r\n    baseURL: 'http://192.168.70.192:8080', // 后端服务地址\r\n    timeout: 5000,\r\n    withCredentials: true // 允许跨域请求携带凭证\r\n});\r\n\r\n// 是否正在刷新token\r\nlet isRefreshing = false;\r\n// 重试队列\r\nlet retryRequests = [];\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n    config => {\r\n        const userStore = useUserStore();\r\n        const token = userStore.token;\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    error => {\r\n        console.error('Request error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        const res = response.data;\r\n        if (res.code !== 200) {\r\n            ElMessage.error(res.message || '请求失败');\r\n            return Promise.reject(new Error(res.message || '请求失败'));\r\n        }\r\n        return res;\r\n    },\r\n    async error => {\r\n        const {\r\n            response\r\n        } = error;\r\n        const userStore = useUserStore();\r\n\r\n        if (response && response.status === 401) {\r\n            if (!isRefreshing) {\r\n                isRefreshing = true;\r\n\r\n                try {\r\n                    // 尝试刷新token\r\n                    const refreshToken = sessionStorage.getItem('refreshToken');\r\n                    if (refreshToken) {\r\n                        const res = await service.post('/users/refresh-token', {\r\n                            refreshToken\r\n                        });\r\n                        if (res.code === 200) {\r\n                            userStore.setUserInfo({\r\n                                token: res.data.token,\r\n                                user: userStore.userInfo\r\n                            });\r\n\r\n                            // 重试队列中的请求\r\n                            retryRequests.forEach(cb => cb(res.data.token));\r\n                            retryRequests = [];\r\n\r\n                            // 重试当前请求\r\n                            error.config.headers['Authorization'] = `Bearer ${res.data.token}`;\r\n                            return service(error.config);\r\n                        }\r\n                    }\r\n                } catch (refreshError) {\r\n                    console.error('Token refresh failed:', refreshError);\r\n                } finally {\r\n                    isRefreshing = false;\r\n                }\r\n            } else {\r\n                // 将请求加入重试队列\r\n                return new Promise(resolve => {\r\n                    retryRequests.push(token => {\r\n                        error.config.headers['Authorization'] = `Bearer ${token}`;\r\n                        resolve(service(error.config));\r\n                    });\r\n                });\r\n            }\r\n\r\n            // token刷新失败，清除用户信息并跳转到登录页\r\n            userStore.clearUserInfo();\r\n            router.push('/login');\r\n            ElMessage.error('登录已过期，请重新登录');\r\n        } else if (response && response.status === 403) {\r\n            ElMessage.error('没有权限，请重新登录');\r\n            userStore.clearUserInfo();\r\n            router.push('/login');\r\n        } else {\r\n            ElMessage.error(error.message || '请求失败');\r\n        }\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default service;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}