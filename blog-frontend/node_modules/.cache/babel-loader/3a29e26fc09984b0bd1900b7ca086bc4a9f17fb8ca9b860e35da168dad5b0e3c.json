{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { useUserStore } from '@/store/user';\nimport router from '@/router';\nconst service = axios.create({\n  baseURL: 'http://192.168.70.192:8080',\n  // 后端服务地址\n  timeout: 5000,\n  withCredentials: true // 允许跨域请求携带凭证\n});\n// 是否正在刷新token\nlet isRefreshing = false;\n// 重试队列\nlet retryRequests = [];\n\n// 请求拦截器\n// 修改拦截器处理\nservice.interceptors.response.use(response => {\n  // 统一处理响应结构\n  const res = response.data;\n\n  // 检查业务状态码（根据实际API调整）\n  if (res.code === 200) {\n    return res.data; // 返回实际业务数据\n  } else {\n    // 返回具体错误信息\n    const errorMessage = res.message || '请求失败';\n    console.error(`API 错误: ${response.config.url}`, res);\n    return Promise.reject(new Error(errorMessage));\n  }\n}, error => {\n  // 处理网络错误\n  let errorMessage = '网络错误';\n  if (error.response) {\n    // 服务器返回了响应但状态码不在 2xx 范围\n    errorMessage = `请求失败: ${error.response.status} ${error.response.statusText}`;\n    console.error('API 响应错误:', error.response.data);\n  } else if (error.request) {\n    // 请求已发出但没有收到响应\n    errorMessage = '服务器未响应';\n    console.error('服务器未响应:', error.request);\n  } else {\n    // 请求设置错误\n    errorMessage = error.message;\n    console.error('请求设置错误:', error.message);\n  }\n  return Promise.reject(new Error(errorMessage));\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","useUserStore","router","service","create","baseURL","timeout","withCredentials","isRefreshing","retryRequests","interceptors","response","use","res","data","code","errorMessage","message","console","error","config","url","Promise","reject","Error","status","statusText","request"],"sources":["C:/Users/52291/Desktop/test/blog/blog/blog-frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n    ElMessage\r\n} from 'element-plus';\r\nimport {\r\n    useUserStore\r\n} from '@/store/user';\r\nimport router from '@/router';\r\n\r\nconst service = axios.create({\r\n    baseURL: 'http://192.168.70.192:8080', // 后端服务地址\r\n    timeout: 5000,\r\n    withCredentials: true // 允许跨域请求携带凭证\r\n});\r\n// 是否正在刷新token\r\nlet isRefreshing = false;\r\n// 重试队列\r\nlet retryRequests = [];\r\n\r\n// 请求拦截器\r\n// 修改拦截器处理\r\nservice.interceptors.response.use(\r\n    response => {\r\n      // 统一处理响应结构\r\n      const res = response.data\r\n      \r\n      // 检查业务状态码（根据实际API调整）\r\n      if (res.code === 200) {\r\n        return res.data // 返回实际业务数据\r\n      } else {\r\n        // 返回具体错误信息\r\n        const errorMessage = res.message || '请求失败'\r\n        console.error(`API 错误: ${response.config.url}`, res)\r\n        return Promise.reject(new Error(errorMessage))\r\n      }\r\n    },\r\n    error => {\r\n      // 处理网络错误\r\n      let errorMessage = '网络错误'\r\n      \r\n      if (error.response) {\r\n        // 服务器返回了响应但状态码不在 2xx 范围\r\n        errorMessage = `请求失败: ${error.response.status} ${error.response.statusText}`\r\n        console.error('API 响应错误:', error.response.data)\r\n      } else if (error.request) {\r\n        // 请求已发出但没有收到响应\r\n        errorMessage = '服务器未响应'\r\n        console.error('服务器未响应:', error.request)\r\n      } else {\r\n        // 请求设置错误\r\n        errorMessage = error.message\r\n        console.error('请求设置错误:', error.message)\r\n      }\r\n      \r\n      return Promise.reject(new Error(errorMessage))\r\n    }\r\n  )\r\n\r\nexport default service;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,SAAS,QACN,cAAc;AACrB,SACIC,YAAY,QACT,cAAc;AACrB,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACzBC,OAAO,EAAE,4BAA4B;EAAE;EACvCC,OAAO,EAAE,IAAI;EACbC,eAAe,EAAE,IAAI,CAAC;AAC1B,CAAC,CAAC;AACF;AACA,IAAIC,YAAY,GAAG,KAAK;AACxB;AACA,IAAIC,aAAa,GAAG,EAAE;;AAEtB;AACA;AACAN,OAAO,CAACO,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC7BD,QAAQ,IAAI;EACV;EACA,MAAME,GAAG,GAAGF,QAAQ,CAACG,IAAI;;EAEzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IACpB,OAAOF,GAAG,CAACC,IAAI,EAAC;EAClB,CAAC,MAAM;IACL;IACA,MAAME,YAAY,GAAGH,GAAG,CAACI,OAAO,IAAI,MAAM;IAC1CC,OAAO,CAACC,KAAK,CAAC,WAAWR,QAAQ,CAACS,MAAM,CAACC,GAAG,EAAE,EAAER,GAAG,CAAC;IACpD,OAAOS,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACR,YAAY,CAAC,CAAC;EAChD;AACF,CAAC,EACDG,KAAK,IAAI;EACP;EACA,IAAIH,YAAY,GAAG,MAAM;EAEzB,IAAIG,KAAK,CAACR,QAAQ,EAAE;IAClB;IACAK,YAAY,GAAG,SAASG,KAAK,CAACR,QAAQ,CAACc,MAAM,IAAIN,KAAK,CAACR,QAAQ,CAACe,UAAU,EAAE;IAC5ER,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACR,QAAQ,CAACG,IAAI,CAAC;EACjD,CAAC,MAAM,IAAIK,KAAK,CAACQ,OAAO,EAAE;IACxB;IACAX,YAAY,GAAG,QAAQ;IACvBE,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACQ,OAAO,CAAC;EACzC,CAAC,MAAM;IACL;IACAX,YAAY,GAAGG,KAAK,CAACF,OAAO;IAC5BC,OAAO,CAACC,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACF,OAAO,CAAC;EACzC;EAEA,OAAOK,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAACR,YAAY,CAAC,CAAC;AAChD,CACF,CAAC;AAEH,eAAeb,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}