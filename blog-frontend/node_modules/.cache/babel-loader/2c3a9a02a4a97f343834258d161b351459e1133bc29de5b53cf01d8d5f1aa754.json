{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { useUserStore } from '@/store/user';\nimport router from '@/router';\nconst service = axios.create({\n  baseURL: 'http://192.168.70.192:8080',\n  // 后端服务地址\n  timeout: 5000,\n  withCredentials: true // 允许跨域请求携带凭证\n});\n// 是否正在刷新token\nlet isRefreshing = false;\n// 重试队列\nlet retryRequests = [];\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  const userStore = useUserStore();\n  const token = userStore.token;\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  // 统一处理响应结构\n  const res = response.data;\n\n  // 检查业务状态码（根据实际API调整）\n  if (res.code === 200) {\n    return res.data; // 返回实际业务数据\n  } else {\n    // 返回具体错误信息\n    const errorMessage = res.message || '请求失败';\n    console.error(`API 错误: ${response.config.url}`, res);\n    return Promise.reject(new Error(errorMessage));\n  }\n}, error => {\n  // 处理网络错误\n  let errorMessage = '网络错误';\n  if (error.response) {\n    // 服务器返回了响应但状态码不在 2xx 范围\n    errorMessage = `请求失败: ${error.response.status} ${error.response.statusText}`;\n    console.error('API 响应错误:', error.response.data);\n  } else if (error.request) {\n    // 请求已发出但没有收到响应\n    errorMessage = '服务器未响应';\n    console.error('服务器未响应:', error.request);\n  } else {\n    // 请求设置错误\n    errorMessage = error.message;\n    console.error('请求设置错误:', error.message);\n  }\n  return Promise.reject(new Error(errorMessage));\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","useUserStore","router","service","create","baseURL","timeout","withCredentials","isRefreshing","retryRequests","interceptors","request","use","config","userStore","token","headers","error","console","Promise","reject","response","res","data","code","errorMessage","message","url","Error","status","statusText"],"sources":["C:/Users/52291/Desktop/test/blog/blog/blog-frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios';\r\nimport {\r\n    ElMessage\r\n} from 'element-plus';\r\nimport {\r\n    useUserStore\r\n} from '@/store/user';\r\nimport router from '@/router';\r\n\r\nconst service = axios.create({\r\n    baseURL: 'http://192.168.70.192:8080', // 后端服务地址\r\n    timeout: 5000,\r\n    withCredentials: true // 允许跨域请求携带凭证\r\n});\r\n// 是否正在刷新token\r\nlet isRefreshing = false;\r\n// 重试队列\r\nlet retryRequests = [];\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n    config => {\r\n        const userStore = useUserStore();\r\n        const token = userStore.token;\r\n        if (token) {\r\n            config.headers['Authorization'] = `Bearer ${token}`;\r\n        }\r\n        return config;\r\n    },\r\n    error => {\r\n        console.error('Request error:', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        // 统一处理响应结构\r\n        const res = response.data\r\n        \r\n        // 检查业务状态码（根据实际API调整）\r\n        if (res.code === 200) {\r\n            return res.data // 返回实际业务数据\r\n        } else {\r\n            // 返回具体错误信息\r\n            const errorMessage = res.message || '请求失败'\r\n            console.error(`API 错误: ${response.config.url}`, res)\r\n            return Promise.reject(new Error(errorMessage))\r\n        }\r\n    },\r\n    error => {\r\n        // 处理网络错误\r\n        let errorMessage = '网络错误'\r\n        \r\n        if (error.response) {\r\n            // 服务器返回了响应但状态码不在 2xx 范围\r\n            errorMessage = `请求失败: ${error.response.status} ${error.response.statusText}`\r\n            console.error('API 响应错误:', error.response.data)\r\n        } else if (error.request) {\r\n            // 请求已发出但没有收到响应\r\n            errorMessage = '服务器未响应'\r\n            console.error('服务器未响应:', error.request)\r\n        } else {\r\n            // 请求设置错误\r\n            errorMessage = error.message\r\n            console.error('请求设置错误:', error.message)\r\n        }\r\n        \r\n        return Promise.reject(new Error(errorMessage))\r\n    }\r\n);\r\n\r\nexport default service;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,SAAS,QACN,cAAc;AACrB,SACIC,YAAY,QACT,cAAc;AACrB,OAAOC,MAAM,MAAM,UAAU;AAE7B,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EACzBC,OAAO,EAAE,4BAA4B;EAAE;EACvCC,OAAO,EAAE,IAAI;EACbC,eAAe,EAAE,IAAI,CAAC;AAC1B,CAAC,CAAC;AACF;AACA,IAAIC,YAAY,GAAG,KAAK;AACxB;AACA,IAAIC,aAAa,GAAG,EAAE;;AAEtB;AACAN,OAAO,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACN,MAAMC,SAAS,GAAGb,YAAY,CAAC,CAAC;EAChC,MAAMc,KAAK,GAAGD,SAAS,CAACC,KAAK;EAC7B,IAAIA,KAAK,EAAE;IACPF,MAAM,CAACG,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;EACvD;EACA,OAAOF,MAAM;AACjB,CAAC,EACDI,KAAK,IAAI;EACLC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAd,OAAO,CAACO,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC7BS,QAAQ,IAAI;EACR;EACA,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IAClB,OAAOF,GAAG,CAACC,IAAI,EAAC;EACpB,CAAC,MAAM;IACH;IACA,MAAME,YAAY,GAAGH,GAAG,CAACI,OAAO,IAAI,MAAM;IAC1CR,OAAO,CAACD,KAAK,CAAC,WAAWI,QAAQ,CAACR,MAAM,CAACc,GAAG,EAAE,EAAEL,GAAG,CAAC;IACpD,OAAOH,OAAO,CAACC,MAAM,CAAC,IAAIQ,KAAK,CAACH,YAAY,CAAC,CAAC;EAClD;AACJ,CAAC,EACDR,KAAK,IAAI;EACL;EACA,IAAIQ,YAAY,GAAG,MAAM;EAEzB,IAAIR,KAAK,CAACI,QAAQ,EAAE;IAChB;IACAI,YAAY,GAAG,SAASR,KAAK,CAACI,QAAQ,CAACQ,MAAM,IAAIZ,KAAK,CAACI,QAAQ,CAACS,UAAU,EAAE;IAC5EZ,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAACI,QAAQ,CAACE,IAAI,CAAC;EACnD,CAAC,MAAM,IAAIN,KAAK,CAACN,OAAO,EAAE;IACtB;IACAc,YAAY,GAAG,QAAQ;IACvBP,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACN,OAAO,CAAC;EAC3C,CAAC,MAAM;IACH;IACAc,YAAY,GAAGR,KAAK,CAACS,OAAO;IAC5BR,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACS,OAAO,CAAC;EAC3C;EAEA,OAAOP,OAAO,CAACC,MAAM,CAAC,IAAIQ,KAAK,CAACH,YAAY,CAAC,CAAC;AAClD,CACJ,CAAC;AAED,eAAetB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}