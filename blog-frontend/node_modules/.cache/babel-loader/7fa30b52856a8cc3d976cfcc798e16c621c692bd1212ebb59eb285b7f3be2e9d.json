{"ast":null,"code":"import { defineStore } from 'pinia';\nimport { ref } from 'vue';\nimport CryptoJS from 'crypto-js';\n\n// 加密密钥，建议放在环境变量中\nconst SECRET_KEY = 'your-secret-key';\n\n// 加密函数\nconst encrypt = data => {\n  return CryptoJS.AES.encrypt(JSON.stringify(data), SECRET_KEY).toString();\n};\n\n// 解密函数\nconst decrypt = encryptedData => {\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, SECRET_KEY);\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n  } catch (e) {\n    console.error('解密失败:', e);\n    return null;\n  }\n};\nexport const useUserStore = defineStore('user', () => {\n  const token = ref('');\n  const userInfo = ref(null);\n\n  // 初始化时从 sessionStorage 获取数据\n  const initFromStorage = () => {\n    const storedUserInfo = sessionStorage.getItem('userInfo');\n    // const storedRefreshToken = sessionStorage.getItem('refreshToken')\n\n    if (storedUserInfo) {\n      try {\n        const decryptedData = decrypt(storedUserInfo);\n        if (decryptedData && decryptedData.expires > Date.now()) {\n          userInfo.value = decryptedData.data;\n          token.value = decryptedData.token;\n        } else {\n          // 数据已过期，清除存储\n          clearUserInfo();\n        }\n      } catch (e) {\n        console.error('初始化用户数据失败:', e);\n        clearUserInfo();\n      }\n    }\n  };\n\n  // 初始化\n  initFromStorage();\n  const setUserInfo = userData => {\n    // 设置 token\n    token.value = userData.token;\n\n    // 设置用户信息，添加过期时间（例如24小时）\n    const userDataWithExpiry = {\n      data: userData.user,\n      token: userData.token,\n      expires: Date.now() + 24 * 60 * 60 * 1000\n    };\n\n    // 加密后存储\n    const encryptedData = encrypt(userDataWithExpiry);\n    sessionStorage.setItem('userInfo', encryptedData);\n\n    // 存储refresh token\n    if (userData.refreshToken) {\n      sessionStorage.setItem('refreshToken', userData.refreshToken);\n    }\n    userInfo.value = userData.user;\n    //单独设置用户头像\n    if (userData.user && userData.user.avatar) {\n      userInfo.value.avatar = \"http://localhost:8082\" + userData.user.avatar;\n    }\n  };\n  const clearUserInfo = () => {\n    token.value = '';\n    userInfo.value = null;\n    sessionStorage.removeItem('userInfo');\n    sessionStorage.removeItem('refreshToken');\n  };\n\n  // 检查用户信息是否有效\n  const isUserInfoValid = () => {\n    return userInfo.value !== null && token.value !== '';\n  };\n  return {\n    token,\n    userInfo,\n    setUserInfo,\n    clearUserInfo,\n    isUserInfoValid\n  };\n});","map":{"version":3,"names":["defineStore","ref","CryptoJS","SECRET_KEY","encrypt","data","AES","JSON","stringify","toString","decrypt","encryptedData","bytes","parse","enc","Utf8","e","console","error","useUserStore","token","userInfo","initFromStorage","storedUserInfo","sessionStorage","getItem","decryptedData","expires","Date","now","value","clearUserInfo","setUserInfo","userData","userDataWithExpiry","user","setItem","refreshToken","avatar","removeItem","isUserInfoValid"],"sources":["C:/Users/52291/Desktop/test/blog/blog/blog-frontend/src/store/user.js"],"sourcesContent":["import { defineStore } from 'pinia'\r\nimport { ref } from 'vue'\r\nimport CryptoJS from 'crypto-js'\r\n\r\n// 加密密钥，建议放在环境变量中\r\nconst SECRET_KEY = 'your-secret-key'\r\n\r\n// 加密函数\r\nconst encrypt = (data) => {\r\n  return CryptoJS.AES.encrypt(JSON.stringify(data), SECRET_KEY).toString()\r\n}\r\n\r\n// 解密函数\r\nconst decrypt = (encryptedData) => {\r\n  try {\r\n    const bytes = CryptoJS.AES.decrypt(encryptedData, SECRET_KEY)\r\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8))\r\n  } catch (e) {\r\n    console.error('解密失败:', e)\r\n    return null\r\n  }\r\n}\r\n\r\nexport const useUserStore = defineStore('user', () => {\r\n  const token = ref('')\r\n  const userInfo = ref(null)\r\n  \r\n  // 初始化时从 sessionStorage 获取数据\r\n  const initFromStorage = () => {\r\n    const storedUserInfo = sessionStorage.getItem('userInfo')\r\n    // const storedRefreshToken = sessionStorage.getItem('refreshToken')\r\n    \r\n    if (storedUserInfo) {\r\n      try {\r\n        const decryptedData = decrypt(storedUserInfo)\r\n        if (decryptedData && decryptedData.expires > Date.now()) {\r\n          userInfo.value = decryptedData.data\r\n          token.value = decryptedData.token\r\n        } else {\r\n          // 数据已过期，清除存储\r\n          clearUserInfo()\r\n        }\r\n      } catch (e) {\r\n        console.error('初始化用户数据失败:', e)\r\n        clearUserInfo()\r\n      }\r\n    }\r\n  }\r\n\r\n  // 初始化\r\n  initFromStorage()\r\n  \r\n  const setUserInfo = (userData) => {\r\n    // 设置 token\r\n    token.value = userData.token\r\n    \r\n    // 设置用户信息，添加过期时间（例如24小时）\r\n    const userDataWithExpiry = {\r\n      data: userData.user,\r\n      token: userData.token,\r\n      expires: Date.now() + 24 * 60 * 60 * 1000\r\n    }\r\n    \r\n    // 加密后存储\r\n    const encryptedData = encrypt(userDataWithExpiry)\r\n    sessionStorage.setItem('userInfo', encryptedData)\r\n    \r\n    // 存储refresh token\r\n    if (userData.refreshToken) {\r\n      sessionStorage.setItem('refreshToken', userData.refreshToken)\r\n    }\r\n    \r\n    userInfo.value = userData.user\r\n    //单独设置用户头像\r\n    if (userData.user && userData.user.avatar) {\r\n      userInfo.value.avatar =\"http://localhost:8082\"+ userData.user.avatar\r\n    }\r\n  }\r\n  \r\n  const clearUserInfo = () => {\r\n    token.value = ''\r\n    userInfo.value = null\r\n    sessionStorage.removeItem('userInfo')\r\n    sessionStorage.removeItem('refreshToken')\r\n  }\r\n\r\n  // 检查用户信息是否有效\r\n  const isUserInfoValid = () => {\r\n    return userInfo.value !== null && token.value !== ''\r\n  }\r\n  \r\n  return {\r\n    token,\r\n    userInfo,\r\n    setUserInfo,\r\n    clearUserInfo,\r\n    isUserInfoValid\r\n  }\r\n})"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}