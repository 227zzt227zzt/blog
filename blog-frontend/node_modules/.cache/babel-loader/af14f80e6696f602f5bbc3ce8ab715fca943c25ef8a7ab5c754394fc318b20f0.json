{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive, onMounted } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { Plus } from '@element-plus/icons-vue';\n\n// 模拟API请求函数（实际项目中替换为真实API调用）\n\nexport default {\n  __name: 'AllTags',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const mockFetchTags = params => {\n      return new Promise(resolve => {\n        // 模拟延迟\n        setTimeout(() => {\n          const {\n            page = 1,\n            pageSize = 10\n          } = params;\n          const total = 35;\n          const startIndex = (page - 1) * pageSize;\n          const endIndex = Math.min(startIndex + pageSize, total);\n          const tags = [];\n          for (let i = startIndex; i < endIndex; i++) {\n            tags.push({\n              id: i + 1,\n              name: `标签 ${i + 1}`,\n              color: `#${Math.floor(Math.random() * 16777215).toString(16)}`\n            });\n          }\n          resolve({\n            code: 200,\n            data: {\n              items: tags,\n              total\n            }\n          });\n        }, 500);\n      });\n    };\n    const mockCreateTag = tag => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            code: 200,\n            data: {\n              ...tag,\n              id: Math.floor(Math.random() * 1000) + 100\n            }\n          });\n        }, 300);\n      });\n    };\n    const mockUpdateTag = tag => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            code: 200,\n            data: tag\n          });\n        }, 300);\n      });\n    };\n    const mockDeleteTag = id => {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          resolve({\n            code: 200,\n            message: '删除成功',\n            id: id\n          });\n        }, 300);\n      });\n    };\n\n    // 组件状态\n    const tags = ref([]);\n    const dialogVisible = ref(false);\n    const isEditing = ref(false);\n    const tagForm = ref(null);\n    const currentTag = ref({\n      id: null,\n      name: '',\n      color: '#409EFF'\n    });\n    const pagination = reactive({\n      currentPage: 1,\n      pageSize: 10,\n      total: 0\n    });\n    const formRules = reactive({\n      name: [{\n        required: true,\n        message: '请输入标签名称',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 20,\n        message: '长度在 2 到 20 个字符',\n        trigger: 'blur'\n      }],\n      color: [{\n        required: true,\n        message: '请选择标签颜色',\n        trigger: 'blur'\n      }]\n    });\n\n    // 生命周期钩子\n    onMounted(() => {\n      fetchTags();\n    });\n\n    // 获取标签列表\n    const fetchTags = async () => {\n      try {\n        const response = await mockFetchTags({\n          page: pagination.currentPage,\n          pageSize: pagination.pageSize\n        });\n        if (response.code === 200) {\n          tags.value = response.data.items;\n          pagination.total = response.data.total;\n        } else {\n          ElMessage.error('获取标签列表失败');\n        }\n      } catch (error) {\n        ElMessage.error('请求失败: ' + error.message);\n      }\n    };\n\n    // 打开创建对话框\n    const openCreateDialog = () => {\n      isEditing.value = false;\n      currentTag.value = {\n        id: null,\n        name: '',\n        color: '#409EFF'\n      };\n      dialogVisible.value = true;\n    };\n\n    // 打开编辑对话框\n    const openEditDialog = tag => {\n      isEditing.value = true;\n      currentTag.value = {\n        ...tag\n      };\n      dialogVisible.value = true;\n    };\n\n    // 提交标签表单\n    const submitTagForm = async () => {\n      try {\n        await tagForm.value.validate();\n        if (isEditing.value) {\n          // 更新标签\n          const response = await mockUpdateTag(currentTag.value);\n          if (response.code === 200) {\n            ElMessage.success('标签更新成功');\n            // 更新本地数据\n            const index = tags.value.findIndex(t => t.id === currentTag.value.id);\n            if (index !== -1) {\n              tags.value.splice(index, 1, response.data);\n            }\n          } else {\n            ElMessage.error('更新失败');\n          }\n        } else {\n          // 创建标签\n          const response = await mockCreateTag(currentTag.value);\n          if (response.code === 200) {\n            ElMessage.success('标签创建成功');\n            // 添加到列表开头\n            tags.value.unshift(response.data);\n            pagination.total += 1;\n          } else {\n            ElMessage.error('创建失败');\n          }\n        }\n        dialogVisible.value = false;\n      } catch (error) {\n        console.log('表单验证失败', error);\n      }\n    };\n\n    // 确认删除标签\n    const confirmDelete = tag => {\n      ElMessageBox.confirm(`确定要删除标签 \"${tag.name}\" 吗? 此操作不可恢复。`, '删除确认', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(async () => {\n        try {\n          const response = await mockDeleteTag(tag.id);\n          if (response.code === 200) {\n            ElMessage.success('删除成功');\n            // 从列表中移除\n            const index = tags.value.findIndex(t => t.id === tag.id);\n            if (index !== -1) {\n              tags.value.splice(index, 1);\n              pagination.total -= 1;\n            }\n          } else {\n            ElMessage.error('删除失败');\n          }\n        } catch (error) {\n          ElMessage.error('删除失败: ' + error.message);\n        }\n      }).catch(() => {\n        // 用户取消删除\n      });\n    };\n    const __returned__ = {\n      mockFetchTags,\n      mockCreateTag,\n      mockUpdateTag,\n      mockDeleteTag,\n      tags,\n      dialogVisible,\n      isEditing,\n      tagForm,\n      currentTag,\n      pagination,\n      formRules,\n      fetchTags,\n      openCreateDialog,\n      openEditDialog,\n      submitTagForm,\n      confirmDelete,\n      ref,\n      reactive,\n      onMounted,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get Plus() {\n        return Plus;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","ElMessage","ElMessageBox","Plus","mockFetchTags","params","Promise","resolve","setTimeout","page","pageSize","total","startIndex","endIndex","Math","min","tags","i","push","id","name","color","floor","random","toString","code","data","items","mockCreateTag","tag","mockUpdateTag","mockDeleteTag","message","dialogVisible","isEditing","tagForm","currentTag","pagination","currentPage","formRules","required","trigger","max","fetchTags","response","value","error","openCreateDialog","openEditDialog","submitTagForm","validate","success","index","findIndex","t","splice","unshift","console","log","confirmDelete","confirm","confirmButtonText","cancelButtonText","type","then","catch"],"sources":["C:/Users/52291/Desktop/test/blog/blog/blog-frontend/src/views/tags/AllTags.vue"],"sourcesContent":["<template>\r\n    <div class=\"tag-management-container\">\r\n      <!-- 顶部操作栏 -->\r\n      <div class=\"header\">\r\n        <h2>标签管理</h2>\r\n        <el-button type=\"primary\" @click=\"openCreateDialog\">\r\n          <el-icon><Plus /></el-icon> 创建标签\r\n        </el-button>\r\n      </div>\r\n  \r\n      <!-- 标签列表表格 -->\r\n      <el-table :data=\"tags\" style=\"width: 100%\" border>\r\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\r\n        <el-table-column prop=\"name\" label=\"标签名称\" />\r\n        <el-table-column label=\"标签颜色\" width=\"120\">\r\n          <template #default=\"{ row }\">\r\n            <div class=\"color-box\" :style=\"{ backgroundColor: row.color }\"></div>\r\n            <span>{{ row.color }}</span>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"200\">\r\n          <template #default=\"{ row }\">\r\n            <el-button size=\"small\" @click=\"openEditDialog(row)\">编辑</el-button>\r\n            <el-button size=\"small\" type=\"danger\" @click=\"confirmDelete(row)\"\r\n              >删除</el-button\r\n            >\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n  \r\n      <!-- 分页组件 -->\r\n      <div class=\"pagination\">\r\n        <el-pagination\r\n          v-model:current-page=\"pagination.currentPage\"\r\n          v-model:page-size=\"pagination.pageSize\"\r\n          :total=\"pagination.total\"\r\n          layout=\"total, sizes, prev, pager, next, jumper\"\r\n          @size-change=\"fetchTags\"\r\n          @current-change=\"fetchTags\"\r\n        />\r\n      </div>\r\n  \r\n      <!-- 创建/编辑标签对话框 -->\r\n      <el-dialog\r\n        v-model=\"dialogVisible\"\r\n        :title=\"isEditing ? '编辑标签' : '创建标签'\"\r\n        width=\"500px\"\r\n      >\r\n        <el-form\r\n          ref=\"tagForm\"\r\n          :model=\"currentTag\"\r\n          :rules=\"formRules\"\r\n          label-width=\"100px\"\r\n        >\r\n          <el-form-item label=\"标签名称\" prop=\"name\">\r\n            <el-input v-model=\"currentTag.name\" placeholder=\"请输入标签名称\" />\r\n          </el-form-item>\r\n          <el-form-item label=\"标签颜色\" prop=\"color\">\r\n            <el-color-picker v-model=\"currentTag.color\" show-alpha />\r\n            <div class=\"color-preview\">\r\n              预览:\r\n              <span\r\n                class=\"color-block\"\r\n                :style=\"{ backgroundColor: currentTag.color }\"\r\n              ></span>\r\n            </div>\r\n          </el-form-item>\r\n        </el-form>\r\n        <template #footer>\r\n          <el-button @click=\"dialogVisible = false\">取消</el-button>\r\n          <el-button type=\"primary\" @click=\"submitTagForm\">确定</el-button>\r\n        </template>\r\n      </el-dialog>\r\n    </div>\r\n  </template>\r\n  \r\n  <script setup>\r\n  import { ref, reactive, onMounted } from 'vue';\r\n  import { ElMessage, ElMessageBox } from 'element-plus';\r\n  import { Plus } from '@element-plus/icons-vue';\r\n  \r\n  // 模拟API请求函数（实际项目中替换为真实API调用）\r\n  const mockFetchTags = (params) => {\r\n    return new Promise((resolve) => {\r\n      // 模拟延迟\r\n      setTimeout(() => {\r\n        const { page = 1, pageSize = 10 } = params;\r\n        const total = 35;\r\n        const startIndex = (page - 1) * pageSize;\r\n        const endIndex = Math.min(startIndex + pageSize, total);\r\n        \r\n        const tags = [];\r\n        for (let i = startIndex; i < endIndex; i++) {\r\n          tags.push({\r\n            id: i + 1,\r\n            name: `标签 ${i + 1}`,\r\n            color: `#${Math.floor(Math.random() * 16777215).toString(16)}`\r\n          });\r\n        }\r\n        \r\n        resolve({\r\n          code: 200,\r\n          data: {\r\n            items: tags,\r\n            total\r\n          }\r\n        });\r\n      }, 500);\r\n    });\r\n  };\r\n  \r\n  const mockCreateTag = (tag) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          code: 200,\r\n          data: {\r\n            ...tag,\r\n            id: Math.floor(Math.random() * 1000) + 100\r\n          }\r\n        });\r\n      }, 300);\r\n    });\r\n  };\r\n  \r\n  const mockUpdateTag = (tag) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          code: 200,\r\n          data: tag\r\n        });\r\n      }, 300);\r\n    });\r\n  };\r\n  \r\n  const mockDeleteTag = (id) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          code: 200,\r\n          message: '删除成功',\r\n          id: id\r\n        });\r\n      }, 300);\r\n    });\r\n  };\r\n  \r\n  // 组件状态\r\n  const tags = ref([]);\r\n  const dialogVisible = ref(false);\r\n  const isEditing = ref(false);\r\n  const tagForm = ref(null);\r\n  \r\n  const currentTag = ref({\r\n    id: null,\r\n    name: '',\r\n    color: '#409EFF'\r\n  });\r\n  \r\n  const pagination = reactive({\r\n    currentPage: 1,\r\n    pageSize: 10,\r\n    total: 0\r\n  });\r\n  \r\n  const formRules = reactive({\r\n    name: [\r\n      { required: true, message: '请输入标签名称', trigger: 'blur' },\r\n      { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\r\n    ],\r\n    color: [\r\n      { required: true, message: '请选择标签颜色', trigger: 'blur' }\r\n    ]\r\n  });\r\n  \r\n  // 生命周期钩子\r\n  onMounted(() => {\r\n    fetchTags();\r\n  });\r\n  \r\n  // 获取标签列表\r\n  const fetchTags = async () => {\r\n    try {\r\n      const response = await mockFetchTags({\r\n        page: pagination.currentPage,\r\n        pageSize: pagination.pageSize\r\n      });\r\n      \r\n      if (response.code === 200) {\r\n        tags.value = response.data.items;\r\n        pagination.total = response.data.total;\r\n      } else {\r\n        ElMessage.error('获取标签列表失败');\r\n      }\r\n    } catch (error) {\r\n      ElMessage.error('请求失败: ' + error.message);\r\n    }\r\n  };\r\n  \r\n  // 打开创建对话框\r\n  const openCreateDialog = () => {\r\n    isEditing.value = false;\r\n    currentTag.value = {\r\n      id: null,\r\n      name: '',\r\n      color: '#409EFF'\r\n    };\r\n    dialogVisible.value = true;\r\n  };\r\n  \r\n  // 打开编辑对话框\r\n  const openEditDialog = (tag) => {\r\n    isEditing.value = true;\r\n    currentTag.value = { ...tag };\r\n    dialogVisible.value = true;\r\n  };\r\n  \r\n  // 提交标签表单\r\n  const submitTagForm = async () => {\r\n    try {\r\n      await tagForm.value.validate();\r\n      \r\n      if (isEditing.value) {\r\n        // 更新标签\r\n        const response = await mockUpdateTag(currentTag.value);\r\n        if (response.code === 200) {\r\n          ElMessage.success('标签更新成功');\r\n          // 更新本地数据\r\n          const index = tags.value.findIndex(t => t.id === currentTag.value.id);\r\n          if (index !== -1) {\r\n            tags.value.splice(index, 1, response.data);\r\n          }\r\n        } else {\r\n          ElMessage.error('更新失败');\r\n        }\r\n      } else {\r\n        // 创建标签\r\n        const response = await mockCreateTag(currentTag.value);\r\n        if (response.code === 200) {\r\n          ElMessage.success('标签创建成功');\r\n          // 添加到列表开头\r\n          tags.value.unshift(response.data);\r\n          pagination.total += 1;\r\n        } else {\r\n          ElMessage.error('创建失败');\r\n        }\r\n      }\r\n      \r\n      dialogVisible.value = false;\r\n    } catch (error) {\r\n      console.log('表单验证失败', error);\r\n    }\r\n  };\r\n  \r\n  // 确认删除标签\r\n  const confirmDelete = (tag) => {\r\n    ElMessageBox.confirm(\r\n      `确定要删除标签 \"${tag.name}\" 吗? 此操作不可恢复。`,\r\n      '删除确认',\r\n      {\r\n        confirmButtonText: '确定',\r\n        cancelButtonText: '取消',\r\n        type: 'warning'\r\n      }\r\n    )\r\n      .then(async () => {\r\n        try {\r\n          const response = await mockDeleteTag(tag.id);\r\n          if (response.code === 200) {\r\n            ElMessage.success('删除成功');\r\n            // 从列表中移除\r\n            const index = tags.value.findIndex(t => t.id === tag.id);\r\n            if (index !== -1) {\r\n              tags.value.splice(index, 1);\r\n              pagination.total -= 1;\r\n            }\r\n          } else {\r\n            ElMessage.error('删除失败');\r\n          }\r\n        } catch (error) {\r\n          ElMessage.error('删除失败: ' + error.message);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        // 用户取消删除\r\n      });\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .tag-management-container {\r\n    padding: 20px;\r\n    background-color: #fff;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  .header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .color-box {\r\n    display: inline-block;\r\n    width: 20px;\r\n    height: 20px;\r\n    margin-right: 8px;\r\n    vertical-align: middle;\r\n    border-radius: 4px;\r\n    border: 1px solid #eee;\r\n  }\r\n  \r\n  .pagination {\r\n    margin-top: 20px;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n  }\r\n  \r\n  .color-preview {\r\n    margin-top: 10px;\r\n  }\r\n  \r\n  .color-block {\r\n    display: inline-block;\r\n    width: 30px;\r\n    height: 30px;\r\n    margin-left: 10px;\r\n    vertical-align: middle;\r\n    border-radius: 4px;\r\n    border: 1px solid #dcdfe6;\r\n  }\r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}